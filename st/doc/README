How to install and use st80 and st80.sim
----------------------------------------

To do simulations, you need two programs (at least): st80, and
st80.sim.  st80 runs an interactive Smalltalk system, which allows you
to record a trace of your interactions.  st80.sim can then replay
these interactions, generating a variety of trace data describing the
internal actions of the virtual machine.  See the manual page
(st80.sim.man) for options and details of the trace data.

The basic sequence is:
 1. Generate an interaction trace (this is called a script in the
    manual pages and documentation):
    	st80 -i image-file -w -s script-file
    All your interactions will be saved in binary format in the script
    file. 

    To replay the script (eg to check it does what you wanted), a
    command like this should suffice:
        st80 -i image-file -r -s script-file
    The image-file must be that used at the start of the run of st80
    which created the script file.

 2. Replay the script through the simulator, gathering data.
 	st80.sim -d -i image-file -r -s script-file -T tracing-options
    The -d flag is used typically, as you usually don't want to see
    a v_e_r_y slow replay of your interaction.  The tracing-options
    select which information is gathered.  This data is sometimes sent
    to a file (I hope you have lots of disk space!); more often it is
    piped to an analysis program.

    The simulator has an extremely cheap and nasty "user interface" to
    a (sort of) VM "front panel".  A description is in the manual
    page.  Chances are the only commands you'll use are "x" and "Q".

    When running the simulator, you'll need to have
    {method,class}_{index,table} in the current directory (they're
    used by the front panel).

I have supplied two images.  One is the standard Xerox 2.0 image,
unmodified.  This does not work properly under X, as the assumptions
about key mappings are wrong.  However, X.image has these fixed (for a
sun type 4 keyboard, anyway).  Also, there is no file system access
method in xerox.image.  X.image has a "boot" primitive installed
(reads a whole file into a string), and a method to file in code
(String>fileIn, which uses the String as the filename).  Note that the
absence of a filesystem means all methods are decompiled when
browsing.  (If you want to implement filesystem access, then go ahead
... I'd like to know how you get on...)

bootx.script when played on xerox.image will get you X.image; it's
fun to watch this replay! (You'll need FileSys.st in the current
directory.)  Use
	st80 -i images/xerox.image -s scripts/bootx.script -r


				* * *


Installation:

makest builds all versions.  The relevant flags are:
	one of -X, -generic
	-X	build an X11 version (I haven't compiled suntools
		versions in ages, so don't assume anything will work
		if you use -sun or -sunraw.)
	-generic
		Does "generic I/O": can only get input from a script,
		does internal BitBlts but doesn't display anything.
		Only useful in conjunction with -sim.

	-sim	builds st80.sim (otherwise you get st80)

	-big, -small
		the header file has the object memory size screwed
		in:  64K objects, 512K 32-bit words.  This is the
		default (-small).  -big overrides these and gives you
		128K objects and 1M 32-bit words.  It's unlikely
		you'll need a bigger version.  You need not replay a
		script on a VM the same size as it was generated on,
		but you may have problems if you use a smaller one of
		course (you may run out of space).

	-clean	clean up .o files

Other flags are passed to make.  The environment variable CFLAGS is
passed to the C compiler, with other flags added by makest.

Typical compiles would be:
	makest -X
or
	makest -X -big
to build interactive VMs (called st80.X.arch or st80.X.big.arch), and
or more of
	makest -generic -sim
	makest -generic -sim -big
	makest -X -sim
	makest -X -sim -big
to make st80.sim.arch, st80.sim.big.arch, st80.X.sim.arch or
st80.X.sim.big.arch (arch is added by makest dependent on the output
of `arch`.)


				* * *

Other assorted things:

 For some reason that escapes me now, the log of events (identified by
 -t, default st80.trace) is called a trace.  Don't confuse it with
 trace data (generated by -T).  

 Ignore messages in the log about zero width bitmaps.  These are used
 quite commonly by Smalltalk.

 There is at least one bug remaining (a display error under X11).
 There may be more.  For me to fix bugs they must be reproducible!  An
 image and a script file are (almost) essential.  If you have problems,
 mail me, but I can't promise I'll solve them.

 If you make any changes or improvements, I'd like to know.

 Don't give this software to anybody without asking me first.

 If you publish anything using data gathered from this program, I'd
 like to be acknowledged.  I wouldn't mind a copy of papers, reports,
 etc, either.

 
Mario Wolczko

   ______      Dept. of Computer Science   Internet:      mario@cs.man.ac.uk
 /~      ~\    The University              uucp:      mcsun!ukc!man.cs!mario
(    __    )   Manchester M13 9PL          JANET:         mario@uk.ac.man.cs
 `-':  :`-'    U.K.                        Tel: +44-61-275 6146  (FAX: 6236)
____;  ;_____________the mushroom project___________________________________
